# Set VCPKG_POLICY_DLLS_IN_STATIC_LIBRARY instead of using `vcpkg_check_linkage` because
# these DLLs don't link with a CRT.
set(VCPKG_POLICY_DLLS_IN_STATIC_LIBRARY enabled)

if (NOT VCPKG_LIBRARY_LINKAGE STREQUAL "dynamic")
   message(STATUS "Note: ${PORT} always requires dynamic library linkage at runtime.")
endif()

# First part of the above URL with the correct variables
set(DOWNLOAD_URL "https://github.com/gfx-rs/wgpu-native/releases/download/v${VERSION}")
set(ARCHITECTURE_STRING "${VCPKG_TARGET_ARCHITECTURE}")
set(OS_TARGET)

if (WIN32)
    set(OS_TARGET "windows")
elseif (APPLE)
    set(OS_TARGET "macos")
elseif (UNIX)
    set(OS_TARGET "linux")
endif()

if (ARCHITECTURE_STRING STREQUAL "x86")
    set(ARCHITECTURE_STRING "i686")
elseif(ARCHITECTURE_STRING STREQUAL "x64")
    set(ARCHITECTURE_STRING "x86_64")
elseif(ARCHITECTURE_STRING STREQUAL "arm64")
    set(ARCHITECTURE_STRING "aarch64")
elseif(ARCHITECTURE_STRING STREQUAL "arm")
    set(ARCHITECTURE_STRING "aarch32")
endif()

set(DOWNLOAD_FILENAME "wgpu-${OS_TARGET}-${ARCHITECTURE_STRING}-release.zip")
set(DEBUG_DOWNLOAD_FILENAME "wgpu-${OS_TARGET}-${ARCHITECTURE_STRING}-debug.zip")
string(TOLOWER ${DOWNLOAD_FILENAME} DOWNLOAD_FILENAME)

set(DEBUG_SHA512 "0")
set(RELEASE_SHA512 "0")
elseif(DOWNLOAD_FILENAME STREQUAL "wgpu-linux-aarch64-release.zip")
    set(RELEASE_SHA512 "069298306790AD72E5C45181B5CFB74DDF2A2D8328D7858F742D2A2BD6177F0C73FFFD99AB8A5A1C590F5913D22475D765AE7D7DE2E1882DB0CD1C12B47504C7")
    set(DEBUG_SHA512 "9145629E9CB56CA97542D21933DF8D2E33F53D783EDBEF34613B5BF7C82433A81CDAA14F82CAE2866CB4458C3F0959889014B597A9673B6AD4F2591F515AB9D5")
elseif(DOWNLOAD_FILENAME STREQUAL "wgpu-linux-x86_64-release.zip")
    set(RELEASE_SHA512 "8F6604A211B90A6A7CB84937B1E7B7F15D0A3CCAD3F3D880647C7883604CC16BAA3CC54B875F064D2C60D7AA76CAF5BBA56208A77B4980DAE66992203A6C746E")
    set(DEBUG_SHA512 "2EBFD531CBB1A87F415E30C701CCFA4FB6BD9A069D69D3EDF4BED26C59A463110E3B6134ED6DE86EF664D0D78006DD60C76F704CE9AB89CF3455729B4342D270")
elseif(DOWNLOAD_FILENAME STREQUAL "wgpu-macos-aarch64-release.zip")
    set(RELEASE_SHA512 "CA5296EBA57602F209921B4015FBD8BE3B1B9F6268554DB86BAB433868EC4922D4BF0EE2CF47C1117A16B563E95D57B8CDEA03C405BE8AB0A8F6897668F3B65A")
    set(DEBUG_SHA512 "96FF786C4146CEF48838502491772CBAE6F5BDE434F3CAEDE1BA0D9096F9768FA9D3791F267903E9C2CD90921516FEA817F3746149C3307924DD79C18CD46DDD")
elseif(DOWNLOAD_FILENAME STREQUAL "wgpu-macos-x86_64-release.zip")
    set(RELEASE_SHA512 "703ACFDE7BDC030C8E1B0A735333D68E4E72D81697AB01814388DD52CD44613DECF5B0C9B9CBA1A505A1F7B37735FF181AB95E1808BA5CC719DBFF620FB7F1E6")
    set(DEBUG_SHA512 "5A4A450CCBBE6B5C857D3EAFB0894C756E83776B62B365394F70A96EF87565B6530CB518B94329679F62BF3F677AC800DBB2EB1C7101020EB427CA1AE1BB1BD7")
elseif(DOWNLOAD_FILENAME STREQUAL "wgpu-windows-i686-release.zip")
    set(RELEASE_SHA512 "DD7755E39C6190AA4582D4BEF5A89B2E996D43AD69E2BC19BEDBD96166D37C05D29D737E93C8FD9F217B50A311D0F9E098FAF0028FC815B72E67E8FF0963E2C0")
    set(DEBUG_SHA512 "CC5718E73213AD4626D7EF63C1AA8BA4D180433D79E1425236B7064D97D6BC44F1DC669FD4CCEF86B477A5BC2B689D911E718A92FF16AEFE2F5782B63FEFEEA3")
elseif(DOWNLOAD_FILENAME STREQUAL "wgpu-windows-x86_64-release.zip")
    set(RELEASE_SHA512 "05023C7B635F2DB00A667CC067B19E1034B5EE33F6A57675A359DA130A6D0CC1CFD357659632A22BFD261590AE4821A91A258CB33717E7D93EC088E44187F5E5")
    set(DEBUG_SHA512 "9FBF90B306EC341F1D28C9FB1EB8CCF8D918B3F1AFF572E720CBC9269F63A75816209D9EFBA28DF9AA6A803069009417C447748F06822BBB1CE477D55FF5710D")
endif()

vcpkg_download_distfile(ARCHIVE
    URLS "${DOWNLOAD_URL}/${DOWNLOAD_FILENAME}"
    FILENAME "${DOWNLOAD_FILENAME}"
    SHA512 "${RELEASE_SHA512}"
)

vcpkg_download_distfile(DEBUG_ARCHIVE
    URLS "${DOWNLOAD_URL}/${DEBUG_DOWNLOAD_FILENAME}"
    FILENAME "${DEBUG_DOWNLOAD_FILENAME}"
    SHA512 "${DEBUG_SHA512}"
)

vcpkg_extract_source_archive(
    PACKAGE_PATH
    ARCHIVE ${ARCHIVE}
    NO_REMOVE_ONE_LEVEL
)

vcpkg_extract_source_archive(
    DEBUG_PACKAGE_PATH
    ARCHIVE ${ARCHIVE}
    NO_REMOVE_ONE_LEVEL
)

file(INSTALL
    "${PACKAGE_PATH}/webgpu.h"
    "${PACKAGE_PATH}/wgpu.h"
    DESTINATION "${CURRENT_PACKAGES_DIR}/include"
)
file(INSTALL
    "${PACKAGE_PATH}/webgpu.h"
    "${PACKAGE_PATH}/wgpu.h"
    DESTINATION "${CURRENT_PACKAGES_DIR}/include/webgpu"
)

if (VCPKG_TARGET_IS_WINDOWS)
    file(INSTALL
        "${PACKAGE_PATH}/wgpu_native.dll.lib"
        "${PACKAGE_PATH}/wgpu_native.lib"
        DESTINATION "${CURRENT_PACKAGES_DIR}/lib"
    )
    file(COPY "${PACKAGE_PATH}/wgpu_native.dll" DESTINATION "${CURRENT_PACKAGES_DIR}/bin")

    file(INSTALL
        "${DEBUG_PACKAGE_PATH}/wgpu_native.dll.lib"
        "${DEBUG_PACKAGE_PATH}/wgpu_native.lib"
        DESTINATION "${CURRENT_PACKAGES_DIR}/debug/lib"
    )
    file(COPY "${DEBUG_PACKAGE_PATH}/wgpu_native.dll" DESTINATION "${CURRENT_PACKAGES_DIR}/debug/bin")
else()
    file(INSTALL
        "${PACKAGE_PATH}/libwgpu_native.a"
        DESTINATION "${CURRENT_PACKAGES_DIR}/lib"
    )
    file(COPY "${PACKAGE_PATH}/libwgpu_native.so" DESTINATION "${CURRENT_PACKAGES_DIR}/bin")

    file(INSTALL
        "${DEBUG_PACKAGE_PATH}/libwgpu_native.a"
        DESTINATION "${CURRENT_PACKAGES_DIR}/debug/lib"
    )
    file(COPY "${DEBUG_PACKAGE_PATH}/libwgpu_native.so" DESTINATION "${CURRENT_PACKAGES_DIR}/debug/bin")
endif()

vcpkg_install_copyright(FILE_LIST "${CMAKE_CURRENT_LIST_DIR}/LICENSE")

file(INSTALL "${CMAKE_CURRENT_LIST_DIR}/usage" DESTINATION "${CURRENT_PACKAGES_DIR}/share/${PORT}")
# vcpkg_install_copyright(FILE_LIST "${PACKAGE_PATH}/LICENSE.txt")

configure_file("${CMAKE_CURRENT_LIST_DIR}/wgpu-native-config.cmake.in" "${CURRENT_PACKAGES_DIR}/share/${PORT}/${PORT}-config.cmake" COPYONLY)